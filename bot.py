import telebot
import buttons
import database
import json
import time
import traceback
import os
from datetime import datetime
from dotenv import load_dotenv
from buttons import get_main_keyboard, get_services_keyboard, get_automatic_keyboard

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)
ADMIN_ID = os.getenv("ADMIN_ID")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_name = message.from_user.first_name
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    database.add_user_if_not_exists(user_id, message.from_user.username)
    
    welcome_text = (
        f"<b>Telegram-–±–æ—Ç—ã –∏ Mini Apps ‚Äì —Ç–≤–æ–π –±–∏–∑–Ω–µ—Å –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
    )

    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=buttons.get_main_keyboard(),
        parse_mode='HTML'
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–æ–π
    bot.send_message(
        message.chat.id,
        "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç?",
        reply_markup=buttons.get_pdf_button()
    )

@bot.callback_query_handler(func=lambda call: call.data == "get_pdf")
def send_pdf(call):
    with open("checklist.pdf", "rb") as file:
        bot.send_document(
            call.message.chat.id,
            file,
            caption="–í–∞—à —á–µ–∫-–ª–∏—Å—Ç"
        )
    bot.answer_callback_query(call.id)
    

@bot.message_handler(func=lambda m: m.text == "About me")
def send_me(message):
    bot.send_message(message.chat.id, ".......................")

@bot.message_handler(func=lambda message: message.text == "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å")
def show_automation(message):
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:",
        reply_markup=buttons.get_automatic_keyboard()
    )

@bot.message_handler(func=lambda m: m.text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
def send_cons(message):
    bot.send_message(message.chat.id, ".......................")
    
@bot.message_handler(func=lambda m: m.text == "–ì–ª—É–±–∏–Ω–Ω—ã–π –∞—É–¥–∏—Ç")
def send_aut(message):
    bot.send_message(message.chat.id, ".......................")
    
@bot.message_handler(func=lambda m: m.text == "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏")
def send_stsess(message):
    bot.send_message(message.chat.id, ".......................")

@bot.message_handler(func=lambda m: m.text == "WOW —Å–µ—Ä–≤–∏—Å")
def send_wow(message):
    bot.send_message(message.chat.id, ".......................")

@bot.message_handler(func=lambda message: message.text == "–£—Å–ª—É–≥–∏") #–†–∞—Å–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è reply –∫–ª–∞–≤–∞
def show_services(message):
   
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:",
        reply_markup=buttons.get_services_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è–ù–∞–∑–∞–¥")  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
def back_to_main(message):
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=buttons.get_main_keyboard()
    )

# --- –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@bot.message_handler(commands=['adduser'])
def add_user(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    try:
        _, user_id_str, username = message.text.split()
        user_id = int(user_id_str)
        database.add_user(user_id, username)
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser <id> <username>")


@bot.message_handler(commands=['deluser'])
def del_user(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    try:
        _, user_id_str = message.text.split()
        user_id = int(user_id_str)
        database.remove_user(user_id)
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")
    except Exception:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deluser <id>")

@bot.message_handler(commands=['stats']) # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω—É –æ—á–µ–≤–∏–¥–Ω–æ –∂–µ —á—Ç–æ –æ–Ω–∞ –¥–µ–ª–∞–µ—Ç 
def show_stats(message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    top_commands = database.get_top_commands()
    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:\n" + "\n".join(
        f"{cmd}: {count} —Ä–∞–∑" for cmd, count in top_commands
    )
    bot.reply_to(message, response)



#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def run_bot():
    print("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    database.init_db()
    
    while True:
        try:
            print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.polling(none_stop=True, interval=1, timeout=20)
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            traceback.print_exc()  # –ü–µ—á–∞—Ç—å –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
